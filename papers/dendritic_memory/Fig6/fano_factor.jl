"""
Measure the effect of interaction between excitationa nd inhibition in time, aiming to reproduce the analysis in Koch.
The file reproduce figure 6A.
"""

using DrWatson
@quickactivate "Tripod"
using TripodNeuron
include(projectdir("scripts","dendritic_memory","default_plots.jl"))
using StatsBase, Statistics, ProgressBars


"""
Inject a single excitatory spike and and inhibitory spike with delay Δ.
"""
function protocol(tt::Int64, comp::Int; 
                            Δ::Real = 0,
                            inh_comp::Int64=-1, 
                            spiketime::Int64 =1000, 
                            input_spike::Real=20,
                            gi_factor::Real  =15,
                            kwargs...)
	if tt==spiketime
        comp==2 && return input_spike
    end
    if tt == spiketime + round(Int,Δ/TN.dt)
        comp == inh_comp && return input_spike*gi_factor
    end
    return 0
end

"""
Compare the PSP generated by the excitatory spike to the  PSP generated by the excitatory+inhibitory spike. The ratio between the two is the Fano factor
"""
function single_run(inh_comp, delay; inputs, doplot=true, exc_epsp=-1)
		if doplot
	        p= hline([REST],linestyle=:dash, c=:black)
	        p= hline!(p, [30 + REST],linestyle=:dash, c=:black)
		end
        if exc_epsp < 0
            v = TN.run_tripod(inputs.model.ds, protocol,500; inh_comp=-1,inputs...)
            exc_epsp =TN.get_PSP_peak(v, spiketime=inputs.spiketime)
        end
		v = TN.run_tripod(inputs.model.ds, protocol,500; Δ=delay,inh_comp=inh_comp,inputs...)
        inh_epsp =TN.get_PSP_peak(v, spiketime=inputs.spiketime)
        fano =(exc_epsp/inh_epsp)
		if doplot
	        p= plot!(p,30 .+ v[2,:],color= BLU)
	        p= plot!(p,+ v[1,:], color= BLU)
	        p= hline!(p,[REST+get_PSP_peak(v)],linestyle=:dash, c=:red, label="")
	        p= vline!(p,[EXCSPIKETIME-200, EXCSPIKETIME-200],linestyle=:dash, color=:black, label="")
	        p= vline!(p,[EXCSPIKETIME+1000, EXCSPIKETIME+1000],linestyle=:dash, color=:black, label="")
	        return plot!(xlim=(0,2000), title ="F: "*string(fano))
		else
	        return fano
		end
end
##

"""
Compute the Fano factor for different relative delays (Δ)
    """
function F_factor(inputs)
    @unpack delays, spiketime, model, compartments = inputs
    EPSPS = []
    v = TN.run_tripod(model.ds, protocol,500; inh_comp=-1,inputs...)
    exc_epsp =TN.get_PSP_peak(v, spiketime=spiketime)
    EPSPS = Vector{Vector{Float32}}(undef,3)
    Threads.@threads for i in eachindex(compartments)
        epsps = zeros(delays.len)
        compartment =compartments[i]
        for (n,Δ) in enumerate(delays)
            epsps[n]= single_run(compartment,Δ; inputs=inputs, doplot=false, exc_epsp=exc_epsp)
        end
        EPSPS[i] = epsps
    end
    return EPSPS
end


INH_SOMA = 4
INH_ONPATH = 5
INH_OFFPATH = 6
inputs = (model=(ds=(300,300), syn_model=TN.human_synapses, species="H"),
        compartments= [INH_SOMA,INH_ONPATH,INH_OFFPATH],
         spiketime=1000, 
        delays = -40:0.2:20,
         input_spike= 10, 
         gi_factor=10)

epsps = F_factor(inputs)

epsps
labels=["on-soma","on-path","off-path"]
colors= [BLU, RED, :green]
##
p = plot()
for n in 1:3
    plot!(inputs.delays,epsps[n], label=labels[n], color=colors[n], linewidth=3.)
end
p=plot!(legendtitle="Inhibition", ylabel="F factor",xlabel="delay over excitation (ms)")
plot!(p,title="maximum EPSP")
vline!(p,[0], c=:black, lw=3, label="", ls=:dot, alpha=0.4)
p = plot(plot(frame=:none,),p, layout=(2,1), background_color=:white, ylims=(0.5,7.5), lw=3)
savefig(p,plotsdir("dendritic_memory","Fig6A.pdf"))